*** C. Bernardeschi, P. Masci, D. Caramella, R. Dell'Osso. "The benefit of using interactive device simulations as training materials
*** for clinicians: an experience report with a contrast media injector used in CT"

*** The injector stellant is a medical device used to inject intravenously the contrast media used in diagnostic imaging exams.
*** The device is a dual-syringe injector that performs injection of contrast and saline into the bloodstream of patients. 
*** The complete injection system includes a workstation which allows clinicians to set up and menage personalized injection protocols for different patients.
*** The workstation and the injector are in separated room, thus interacting with both can be seen as multitasking even if it is a unique complete injection system.

*** To correctly use the stellant injector the operator has to interleave the interaction with the injector and the workstation in different ways
*** stellant_1: the arm action is done in the workstation;
*** stellant_2: the arm action is done in the injector.

*** 
***         WORKSTATION                      INJECTOR
***    1    pressOn
***    2    pressContinue
***    3                                     PlugSyringe1 delay di durata di 1 e 2
***    4                                     PlugSyringe2
***    5                                     SpikeSalineBag  delay di qualche secondo.
***    6                                     SpikeContrastBag
***    7                                     AutoFill
***    8 		                     FillA
***    9                      	             FillB
***   10                       		     ConnectInfusionSet
***   11		       		     Prime
***   12                                     CheckAir   
***   13    Block delay di durata da 3 a 12
***   14    Arm
***   15                                     Rotate  delay di durata di 13 e 14
***   16                                     StartInjection

*** Even if this module models a normal and successful interaction the steps to be remembered are too much. 

*** The module presents two initial states: 
*** INITSTATE1: the memory capacity is equal to 15 (not realistic) where the interaction with both systems is succesfull;
*** INITSTATE2: the memory capacity is equal to 9 (maximum value possible in reality) where the interaction does not even start.


in CogFram5.maude

(omod TEST-NEW-VERSION is
  including TIMED-OO-COGNITIVE-FRAMEWORK .
  including NAT-TIME-DOMAIN-WITH-INF .  

--- WORKSTATION
  op workstation : -> InterfaceId [ctor] .

  ops wm settingWorkStation : -> Oid [ctor] .

  ops workStationOff workStationOn workstationToBeBlocked injectorToArm newWSstate : -> Perception [ctor] .

  ops pressOnButton pressContinueButton pressBlockButton pressArmButton : -> Action [ctor] . 

  op continueButton : -> Cognition [ctor] .

  ops block arm : -> BasicInfo [ctor] .

--- INJECTOR
  op injector : -> InterfaceId [ctor] .

  op settingInjector : -> Oid [ctor] .

  ops syringe1ToBeInserted syringe2ToBeInserted salineBagToBeInserted contrastBagToBeInserted autofillReady fillSalinReady fillContrastReady infusionSetToBeConnected primeToDo airToCheck injectorToBeRotate injectorReady injection : -> Perception [ctor] .

  ops plugSyringe1 plugSyringe2 spikeSalineBag spikeContrastBag pressAutoFillButton pressFillAButton pressFillBButton connectInfusionSet pressPrimeButton pressAirButton rotateInjector pressStartInjectorButton : -> Action [ctor] .

  ops fillA fillB : -> Cognition [ctor] .

  ops syringe1 syringe2 salineBag contrastBag autofill infusionSet prime air rotate startInjection : -> BasicInfo [ctor] .



--- initState1
  op initState1 : -> Configuration .

  eq initState1 = initializeCognLoad(
    < workstation : Interface | task : < settingWorkStation : Task | subtasks : ((noInfo | workStationOff ==> pressOnButton | noInfo duration 2 difficulty 2/10 delay 0)
                                                                                 (noInfo | workStationOn ==> noAction | continueButton duration 1 difficulty 1/10 delay 0)
                                                                                 (continueButton | workStationOn ==> pressContinueButton | noInfo duration 2 difficulty 2/10 delay 0)) ::
                                                                                ((block | workstationToBeBlocked ==> pressBlockButton | noInfo duration 2 difficulty 2/10 delay 44)
                                                                                 (arm | injectorToArm ==> pressArmButton | noInfo duration 2 difficulty 2/10 delay 0)),
                                                                     waitTime : 0,
                                                                     cognitiveLoad : 0,
                                                                     criticalityLevel : 6/10 ,
                                                                     status : notStarted >,
                                transitions : (workStationOff -- pressOnButton --> workStationOn) ;
                                              (workStationOn -- pressContinueButton --> workstationToBeBlocked) ;
                                              (workstationToBeBlocked -- pressBlockButton --> injectorToArm) ;
                                              (injectorToArm -- pressArmButton --> newWSstate),
                                previousAction : noAction,
                                currentState : workStationOff >

  < injector : Interface | task : < settingInjector : Task | 
                                  subtasks : ((syringe1 | syringe1ToBeInserted ==> plugSyringe1 | noInfo duration 4 difficulty 4/10 delay 5)  *** is it not possible plug syringes before turning on the WS
                                              (syringe2 | syringe2ToBeInserted ==> plugSyringe2 | noInfo duration 4 difficulty 4/10 delay 0)) ::
				      	     ((salineBag | salineBagToBeInserted ==> spikeSalineBag | noInfo duration 4 difficulty 4/10 delay 10) *** it's possible to spike bags only before 10secs
                                              (contrastBag | contrastBagToBeInserted ==> spikeContrastBag | noInfo duration 4 difficulty 4/10 delay 0)) ::
			                     ((autofill | autofillReady ==> pressAutoFillButton | noInfo duration 2 difficulty 2/10 delay 0)
                                              (noInfo | fillSalinReady ==> noAction | fillA duration 2 difficulty 1/10 delay 0)  *** user sees fillA button flashing
                                              (fillA | fillSalinReady ==> pressFillAButton | noInfo duration 2 difficulty 2/10 delay 0)
                                              (noInfo | fillContrastReady ==> noAction | fillB duration 2 difficulty 1/10 delay 0)
                                              (fillB | fillContrastReady ==> pressFillBButton | noInfo duration 2 difficulty 2/10 delay 0)) ::
                                             ((infusionSet | infusionSetToBeConnected ==> connectInfusionSet | noInfo duration 4 difficulty 4/10 delay 0)) ::
                                             ((prime | primeToDo ==> pressPrimeButton | noInfo duration 2 difficulty 2/10 delay 0)) ::
                                             ((air | airToCheck ==> pressAirButton | noInfo duration 2 difficulty 2/10 delay 0)) ::
                                             ((rotate | injectorToBeRotate ==> rotateInjector | noInfo duration 2 difficulty 2/10 delay 4)) ::
                                             ((startInjection | injectorReady ==> pressStartInjectorButton | noInfo duration 2 difficulty 2/10 delay 0)),
                                  waitTime : 0,
                                  cognitiveLoad : 0,
                                  criticalityLevel : 6/10,
                                  status : notStarted >,
                           transitions : (syringe1ToBeInserted -- plugSyringe1 --> syringe2ToBeInserted) ;
                                         (syringe2ToBeInserted -- plugSyringe2 --> salineBagToBeInserted) ;
                                         (salineBagToBeInserted -- spikeSalineBag --> contrastBagToBeInserted) ;
                                         (contrastBagToBeInserted -- spikeContrastBag --> autofillReady) ;
                                         (autofillReady -- pressAutoFillButton --> fillSalinReady) ;
                                         (fillSalinReady -- pressFillAButton --> fillContrastReady) ;
                                         (fillContrastReady -- pressFillBButton --> infusionSetToBeConnected) ;
                                         (infusionSetToBeConnected -- connectInfusionSet --> primeToDo) ;
                                         (primeToDo -- pressPrimeButton --> airToCheck) ;
                                         (airToCheck -- pressAirButton --> injectorToBeRotate) ;
                                         (injectorToBeRotate -- rotateInjector --> injectorReady) ;
                                         (injectorReady -- pressStartInjectorButton --> injection),
                           previousAction : noAction,
                           currentState : syringe1ToBeInserted >

  < wm : WorkingMemory | memory : (workstation |-> goal(pressArmButton) block arm) ; (injector |-> goal(pressStartInjectorButton) syringe1 syringe2 salineBag contrastBag autofill infusionSet prime air rotate startInjection),
                         capacity : 15 >) .


--- initState2
 op initState2 : -> Configuration .

  eq initState2 = initializeCognLoad(
    < workstation : Interface | task : < settingWorkStation : Task | subtasks : ((noInfo | workStationOff ==> pressOnButton | noInfo duration 2 difficulty 2/10 delay 0)
                                                                                 (noInfo | workStationOn ==> noAction | continueButton duration 1 difficulty 1/10 delay 0)
                                                                                 (continueButton | workStationOn ==> pressContinueButton | noInfo duration 2 difficulty 2/10 delay 0)) ::
                                                                                ((block | workstationToBeBlocked ==> pressBlockButton | noInfo duration 2 difficulty 2/10 delay 44)
                                                                                 (arm | injectorToArm ==> pressArmButton | noInfo duration 2 difficulty 2/10 delay 0)),
                                                                     waitTime : 0,
                                                                     cognitiveLoad : 0,
                                                                     criticalityLevel : 6/10 ,
                                                                     status : notStarted >,
                                transitions : (workStationOff -- pressOnButton --> workStationOn) ;
                                              (workStationOn -- pressContinueButton --> workstationToBeBlocked) ;
                                              (workstationToBeBlocked -- pressBlockButton --> injectorToArm) ;
                                              (injectorToArm -- pressArmButton --> newWSstate),
                                previousAction : noAction,
                                currentState : workStationOff >

  < injector : Interface | task : < settingInjector : Task | 
                                  subtasks : ((syringe1 | syringe1ToBeInserted ==> plugSyringe1 | noInfo duration 4 difficulty 4/10 delay 5)  *** is it not possible plug syringes before turning on the WS
                                              (syringe2 | syringe2ToBeInserted ==> plugSyringe2 | noInfo duration 4 difficulty 4/10 delay 0)) ::
				      	     ((salineBag | salineBagToBeInserted ==> spikeSalineBag | noInfo duration 4 difficulty 4/10 delay 10) *** it's possible to spike bags only before 10secs
                                              (contrastBag | contrastBagToBeInserted ==> spikeContrastBag | noInfo duration 4 difficulty 4/10 delay 0)) ::
			                     ((autofill | autofillReady ==> pressAutoFillButton | noInfo duration 2 difficulty 2/10 delay 0)
                                              (noInfo | fillSalinReady ==> noAction | fillA duration 2 difficulty 1/10 delay 0)  *** user sees fillA button flashing
                                              (fillA | fillSalinReady ==> pressFillAButton | noInfo duration 2 difficulty 2/10 delay 0)
                                              (noInfo | fillContrastReady ==> noAction | fillB duration 2 difficulty 1/10 delay 0)
                                              (fillB | fillContrastReady ==> pressFillBButton | noInfo duration 2 difficulty 2/10 delay 0)) ::
                                             ((infusionSet | infusionSetToBeConnected ==> connectInfusionSet | noInfo duration 4 difficulty 4/10 delay 0)) ::
                                             ((prime | primeToDo ==> pressPrimeButton | noInfo duration 2 difficulty 2/10 delay 0)) ::
                                             ((air | airToCheck ==> pressAirButton | noInfo duration 2 difficulty 2/10 delay 0)) ::
                                             ((rotate | injectorToBeRotate ==> rotateInjector | noInfo duration 2 difficulty 2/10 delay 4)) ::
                                             ((startInjection | injectorReady ==> pressStartInjectorButton | noInfo duration 2 difficulty 2/10 delay 0)),
                                  waitTime : 0,
                                  cognitiveLoad : 0,
                                  criticalityLevel : 6/10,
                                  status : notStarted >,
                           transitions : (syringe1ToBeInserted -- plugSyringe1 --> syringe2ToBeInserted) ;
                                         (syringe2ToBeInserted -- plugSyringe2 --> salineBagToBeInserted) ;
                                         (salineBagToBeInserted -- spikeSalineBag --> contrastBagToBeInserted) ;
                                         (contrastBagToBeInserted -- spikeContrastBag --> autofillReady) ;
                                         (autofillReady -- pressAutoFillButton --> fillSalinReady) ;
                                         (fillSalinReady -- pressFillAButton --> fillContrastReady) ;
                                         (fillContrastReady -- pressFillBButton --> infusionSetToBeConnected) ;
                                         (infusionSetToBeConnected -- connectInfusionSet --> primeToDo) ;
                                         (primeToDo -- pressPrimeButton --> airToCheck) ;
                                         (airToCheck -- pressAirButton --> injectorToBeRotate) ;
                                         (injectorToBeRotate -- rotateInjector --> injectorReady) ;
                                         (injectorReady -- pressStartInjectorButton --> injection),
                           previousAction : noAction,
                           currentState : syringe1ToBeInserted >

  < wm : WorkingMemory | memory : (workstation |-> goal(pressArmButton) block arm) ; (injector |-> goal(pressStartInjectorButton) syringe1 syringe2 salineBag contrastBag autofill infusionSet prime air rotate startInjection),
                         capacity : 9 >) .


endom) 


(trew {initState1} in time < 60 .)

(trew {initState2} in time < 60 .)

(utsearch {initState1} =>! {< I:InterfaceId : Interface | task : < T:Oid : Task | status : TS:TaskStatus, AS:AttributeSet > > REST:Configuration}
                            such that TS:TaskStatus =/= completed .)

(utsearch {initState2} =>! {< I:InterfaceId : Interface | task : < T:Oid : Task | status : TS:TaskStatus, AS:AttributeSet > > REST:Configuration}
                            such that TS:TaskStatus =/= completed .)
