*** C. Bernardeschi, P. Masci, D. Caramella, R. Dell'Osso. "The benefit of using interactive device simulations as training materials
*** for clinicians: an experience report with a contrast media injector used in CT"

*** To correctly use the stellant injector the operator has to interleave the interaction with the injector and the workstation in different ways:
*** In both ways simulation shows that the operator has to remember too much information to successfully complete the interaction.

*** In stellant_3 is shown that the interaction would be most successfull if in the device were present some cues indicating the next action to be performed
*** (such as flashing buttons).

*** The module presents two initial states: 
*** INITSTATE1: the arm action is sone in the workstation (such as in stellant_1). The memory capacity is equal to 9.
*** INITSTATE2: the arm action is done in the injector (such as in stellant_2). The memory capacity is equal to 9. 


in CogFram5.maude

(omod TEST-NEW-VERSION is
  including TIMED-OO-COGNITIVE-FRAMEWORK .
  including NAT-TIME-DOMAIN-WITH-INF .  



--- 
  ops workstation injector : -> InterfaceId [ctor] .

  ops wm settingWorkStation settingInjector : -> Oid [ctor] .

  ops workStationOff workStationOn workstationToBeBlocked injectorToArm newWSstate : -> Perception [ctor] .
  ops syringe1ToBeInserted syringe2ToBeInserted salineBagToBeInserted contrastBagToBeInserted autofillReady fillSalinReady fillContrastReady infusionSetToBeConnected primeToDo airToCheck injectorToBeRotate injectorReady injection : -> Perception [ctor] .

  ops pressOnButton pressContinueButton pressBlockButton pressArmButton : -> Action [ctor] . 
  ops plugSyringe1 plugSyringe2 spikeSalineBag spikeContrastBag pressAutoFillButton pressFillAButton pressFillBButton connectInfusionSet pressPrimeButton pressAirButton rotateInjector pressStartInjectorButton : -> Action [ctor] .

  ops continueButton fillA fillB block arm syringe1 syringe2 salineBag contrastBag autofill infusionSet prime air rotate startInjection : -> Cognition [ctor] .



--- initState1    ARM ACTION IN WORKSTATION INTERFACE
 op initState1 : -> Configuration .

  eq initState1 = initializeCognLoad(
    < workstation : Interface | task : < settingWorkStation : Task | subtasks : ((noInfo | workStationOff ==> pressOnButton | noInfo duration 2 difficulty 2/10 delay 0)
                                                                                 (noInfo | workStationOn ==> noAction | continueButton duration 1 difficulty 1/10 delay 0)
                                                                                 (continueButton | workStationOn ==> pressContinueButton | noInfo duration 2 difficulty 2/10 delay 0)) ::
                                                                                ((noInfo | workstationToBeBlocked ==> noAction | block duration 2 difficulty 1/10 delay 60) 
                                                                                 (block | workstationToBeBlocked ==> pressBlockButton | noInfo duration 2 difficulty 2/10 delay 0)  
                                                                                 (noInfo | injectorToArm ==> noAction | arm duration 2 difficulty 1/10 delay 0)
                                                                                 (arm | injectorToArm ==> pressArmButton | noInfo duration 2 difficulty 2/10 delay 0)),
                                                                     waitTime : 0,
                                                                     cognitiveLoad : 0,
                                                                     criticalityLevel : 6/10 ,
                                                                     status : notStarted >,
                                transitions : (workStationOff -- pressOnButton --> workStationOn) ;
                                              (workStationOn -- pressContinueButton --> workstationToBeBlocked) ;
                                              (workstationToBeBlocked -- pressBlockButton --> injectorToArm) ;
                                              (injectorToArm -- pressArmButton --> newWSstate),
                                previousAction : noAction,
                                currentState : workStationOff >

  < injector : Interface | task : < settingInjector : Task | subtasks : ((noInfo | syringe1ToBeInserted ==> noAction | syringe1 duration 2 difficulty 1/10 delay 5)
									 (syringe1 | syringe1ToBeInserted ==> plugSyringe1 | noInfo duration 4 difficulty 4/10 delay 0)  
									 (noInfo | syringe2ToBeInserted ==> noAction | syringe2 duration 2 difficulty 1/10 delay 0)
                                              				 (syringe2 | syringe2ToBeInserted ==> plugSyringe2 | noInfo duration 4 difficulty 4/10 delay 0)) ::
				      	     				((noInfo | salineBagToBeInserted ==> noAction | salineBag duration 2 difficulty 1/10 delay 10)
                                                                         (salineBag | salineBagToBeInserted ==> spikeSalineBag | noInfo duration 4 difficulty 4/10 delay 0)
                                                                         (noInfo | contrastBagToBeInserted ==> noAction | contrastBag duration 2 difficulty 1/10 delay 0) 
                                              				 (contrastBag | contrastBagToBeInserted ==> spikeContrastBag | noInfo duration 4 difficulty 4/10 delay 0)) ::
			                     				((noInfo | autofillReady ==> noAction | autofill duration 2 difficulty 1/10 delay 0)
                                                                         (autofill | autofillReady ==> pressAutoFillButton | noInfo duration 2 difficulty 2/10 delay 0)
                                              				 (noInfo | fillSalinReady ==> noAction | fillA duration 2 difficulty 1/10 delay 0)  
                                              				 (fillA | fillSalinReady ==> pressFillAButton | noInfo duration 2 difficulty 2/10 delay 0)
                                              				 (noInfo | fillContrastReady ==> noAction | fillB duration 2 difficulty 1/10 delay 0)
                                      					 (fillB | fillContrastReady ==> pressFillBButton | noInfo duration 2 difficulty 2/10 delay 0)) ::
                                             				((noInfo | infusionSetToBeConnected ==> noAction | infusionSet duration 2 difficulty 1/10 delay 0)
                                                                         (infusionSet | infusionSetToBeConnected ==> connectInfusionSet | noInfo duration 4 difficulty 4/10 delay 0)) ::
                                             				((noInfo | primeToDo ==> noAction | prime duration 2 difficulty 1/10 delay 0)
                                                                         (prime | primeToDo ==> pressPrimeButton | noInfo duration 2 difficulty 2/10 delay 0)) ::
                                             				((noInfo | airToCheck ==> noAction | air duration 2 difficulty 1/10 delay 0)
                                                                         (air | airToCheck ==> pressAirButton | noInfo duration 2 difficulty 2/10 delay 0)) ::
                                             				((noInfo | injectorToBeRotate ==> noAction | rotate duration 2 difficulty 1/10 delay 8)
                                                                         (rotate | injectorToBeRotate ==> rotateInjector | noInfo duration 2 difficulty 2/10 delay 0)) ::
                                             				((noInfo | injectorReady ==> noAction | startInjection duration 2 difficulty 1/10 delay 0)
                                                                         (startInjection | injectorReady ==> pressStartInjectorButton | noInfo duration 2 difficulty 2/10 delay 0)),
                                  waitTime : 0,
                                  cognitiveLoad : 0,
                                  criticalityLevel : 6/10,
                                  status : notStarted >,
                           transitions : (syringe1ToBeInserted -- plugSyringe1 --> syringe2ToBeInserted) ;
                                         (syringe2ToBeInserted -- plugSyringe2 --> salineBagToBeInserted) ;
                                         (salineBagToBeInserted -- spikeSalineBag --> contrastBagToBeInserted) ;
                                         (contrastBagToBeInserted -- spikeContrastBag --> autofillReady) ;
                                         (autofillReady -- pressAutoFillButton --> fillSalinReady) ;
                                         (fillSalinReady -- pressFillAButton --> fillContrastReady) ;
                                         (fillContrastReady -- pressFillBButton --> infusionSetToBeConnected) ;
                                         (infusionSetToBeConnected -- connectInfusionSet --> primeToDo) ;
                                         (primeToDo -- pressPrimeButton --> airToCheck) ;
                                         (airToCheck -- pressAirButton --> injectorToBeRotate) ;
                                         (injectorToBeRotate -- rotateInjector --> injectorReady) ;
                                         (injectorReady -- pressStartInjectorButton --> injection),
                           previousAction : noAction,
                           currentState : syringe1ToBeInserted >

  < wm : WorkingMemory | memory : (workstation |-> goal(pressArmButton)) ; (injector |-> goal(pressStartInjectorButton)),
                         capacity : 9 >) .


--- initState2    ARM ACTION IN INJECTOR INTERFACE
 op initState2 : -> Configuration .

  eq initState2 = initializeCognLoad(
    < workstation : Interface | task : < settingWorkStation : Task | subtasks : ((noInfo | workStationOff ==> pressOnButton | noInfo duration 2 difficulty 2/10 delay 0)
                                                                                 (noInfo | workStationOn ==> noAction | continueButton duration 1 difficulty 1/10 delay 0)
                                                                                 (continueButton | workStationOn ==> pressContinueButton | noInfo duration 2 difficulty 2/10 delay 0)) ::
                                                                                ((noInfo | workstationToBeBlocked ==> noAction | block duration 2 difficulty 1/10 delay 60) 
                                                                                 (block | workstationToBeBlocked ==> pressBlockButton | noInfo duration 2 difficulty 2/10 delay 0)),
                                                                     waitTime : 0,
                                                                     cognitiveLoad : 0,
                                                                     criticalityLevel : 6/10 ,
                                                                     status : notStarted >,
                                transitions : (workStationOff -- pressOnButton --> workStationOn) ;
                                              (workStationOn -- pressContinueButton --> workstationToBeBlocked) ;
                                              (workstationToBeBlocked -- pressBlockButton --> injectorToArm) ;
                                              (injectorToArm -- pressArmButton --> newWSstate),
                                previousAction : noAction,
                                currentState : workStationOff >

  < injector : Interface | task : < settingInjector : Task | subtasks : ((noInfo | syringe1ToBeInserted ==> noAction | syringe1 duration 2 difficulty 1/10 delay 5)
									 (syringe1 | syringe1ToBeInserted ==> plugSyringe1 | noInfo duration 4 difficulty 4/10 delay 0)  
									 (noInfo | syringe2ToBeInserted ==> noAction | syringe2 duration 2 difficulty 1/10 delay 0)
                                              				 (syringe2 | syringe2ToBeInserted ==> plugSyringe2 | noInfo duration 4 difficulty 4/10 delay 0)) ::
				      	     				((noInfo | salineBagToBeInserted ==> noAction | salineBag duration 2 difficulty 1/10 delay 10)
                                                                         (salineBag | salineBagToBeInserted ==> spikeSalineBag | noInfo duration 4 difficulty 4/10 delay 0)
                                                                         (noInfo | contrastBagToBeInserted ==> noAction | contrastBag duration 2 difficulty 1/10 delay 0) 
                                              				 (contrastBag | contrastBagToBeInserted ==> spikeContrastBag | noInfo duration 4 difficulty 4/10 delay 0)) ::
			                     				((noInfo | autofillReady ==> noAction | autofill duration 2 difficulty 1/10 delay 0)
                                                                         (autofill | autofillReady ==> pressAutoFillButton | noInfo duration 2 difficulty 2/10 delay 0)
                                              				 (noInfo | fillSalinReady ==> noAction | fillA duration 2 difficulty 1/10 delay 0)  
                                              				 (fillA | fillSalinReady ==> pressFillAButton | noInfo duration 2 difficulty 2/10 delay 0)
                                              				 (noInfo | fillContrastReady ==> noAction | fillB duration 2 difficulty 1/10 delay 0)
                                      					 (fillB | fillContrastReady ==> pressFillBButton | noInfo duration 2 difficulty 2/10 delay 0)) ::
                                             				((noInfo | infusionSetToBeConnected ==> noAction | infusionSet duration 2 difficulty 1/10 delay 0)
                                                                         (infusionSet | infusionSetToBeConnected ==> connectInfusionSet | noInfo duration 4 difficulty 4/10 delay 0)) ::
                                             				((noInfo | primeToDo ==> noAction | prime duration 2 difficulty 1/10 delay 0)
                                                                         (prime | primeToDo ==> pressPrimeButton | noInfo duration 2 difficulty 2/10 delay 0)) ::
                                             				((noInfo | airToCheck ==> noAction | air duration 2 difficulty 1/10 delay 0)
                                                                         (air | airToCheck ==> pressAirButton | noInfo duration 2 difficulty 2/10 delay 0)) ::
                                                                        ((noInfo | injectorToArm ==> noAction | arm duration 2 difficulty 1/10 delay 4)
                                                                         (arm | injectorToArm ==> pressArmButton | noInfo duration 2 difficulty 2/10 delay 0)) ::
                                             				((noInfo | injectorToBeRotate ==> noAction | rotate duration 2 difficulty 1/10 delay 0)
                                                                         (rotate | injectorToBeRotate ==> rotateInjector | noInfo duration 2 difficulty 2/10 delay 0)) ::
                                             				((noInfo | injectorReady ==> noAction | startInjection duration 2 difficulty 1/10 delay 0)
                                                                         (startInjection | injectorReady ==> pressStartInjectorButton | noInfo duration 2 difficulty 2/10 delay 0)),
                                  waitTime : 0,
                                  cognitiveLoad : 0,
                                  criticalityLevel : 6/10,
                                  status : notStarted >,
                           transitions : (syringe1ToBeInserted -- plugSyringe1 --> syringe2ToBeInserted) ;
                                         (syringe2ToBeInserted -- plugSyringe2 --> salineBagToBeInserted) ;
                                         (salineBagToBeInserted -- spikeSalineBag --> contrastBagToBeInserted) ;
                                         (contrastBagToBeInserted -- spikeContrastBag --> autofillReady) ;
                                         (autofillReady -- pressAutoFillButton --> fillSalinReady) ;
                                         (fillSalinReady -- pressFillAButton --> fillContrastReady) ;
                                         (fillContrastReady -- pressFillBButton --> infusionSetToBeConnected) ;
                                         (infusionSetToBeConnected -- connectInfusionSet --> primeToDo) ;
                                         (primeToDo -- pressPrimeButton --> airToCheck) ;
                                         (airToCheck -- pressAirButton --> injectorToArm) ;
                                         (injectorToArm -- pressArmButton --> injectorToBeRotate) ;
                                         (injectorToBeRotate -- rotateInjector --> injectorReady) ;
                                         (injectorReady -- pressStartInjectorButton --> injection),
                           previousAction : noAction,
                           currentState : syringe1ToBeInserted >

  < wm : WorkingMemory | memory : (workstation |-> goal(pressBlockButton)) ; (injector |-> goal(pressStartInjectorButton)),
                         capacity : 9 >) .

endom) 

(trew {initState1} in time < 90 .)
(trew {initState2} in time < 90 .)

(utsearch {initState1} =>! {< I:InterfaceId : Interface | task : < T:Oid : Task | status : TS:TaskStatus, AS:AttributeSet > > REST:Configuration}
                            such that TS:TaskStatus =/= completed .)

(utsearch {initState2} =>! {< I:InterfaceId : Interface | task : < T:Oid : Task | status : TS:TaskStatus, AS:AttributeSet > > REST:Configuration}
                            such that TS:TaskStatus =/= completed .)
